// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench_pb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bench_5fpb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bench_5fpb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bench_5fpb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bench_5fpb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bench_5fpb_2eproto;
namespace benchpb {
class Bar;
class BarDefaultTypeInternal;
extern BarDefaultTypeInternal _Bar_default_instance_;
class Foo;
class FooDefaultTypeInternal;
extern FooDefaultTypeInternal _Foo_default_instance_;
class FooBar;
class FooBarDefaultTypeInternal;
extern FooBarDefaultTypeInternal _FooBar_default_instance_;
class FooBarContainer;
class FooBarContainerDefaultTypeInternal;
extern FooBarContainerDefaultTypeInternal _FooBarContainer_default_instance_;
}  // namespace benchpb
PROTOBUF_NAMESPACE_OPEN
template<> ::benchpb::Bar* Arena::CreateMaybeMessage<::benchpb::Bar>(Arena*);
template<> ::benchpb::Foo* Arena::CreateMaybeMessage<::benchpb::Foo>(Arena*);
template<> ::benchpb::FooBar* Arena::CreateMaybeMessage<::benchpb::FooBar>(Arena*);
template<> ::benchpb::FooBarContainer* Arena::CreateMaybeMessage<::benchpb::FooBarContainer>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace benchpb {

enum Enum : int {
  Apples = 0,
  Pears = 1,
  Bananas = 2,
  Enum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Enum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Enum_IsValid(int value);
constexpr Enum Enum_MIN = Apples;
constexpr Enum Enum_MAX = Bananas;
constexpr int Enum_ARRAYSIZE = Enum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Enum_descriptor();
template<typename T>
inline const std::string& Enum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Enum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Enum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Enum_descriptor(), enum_t_value);
}
inline bool Enum_Parse(
    const std::string& name, Enum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Enum>(
    Enum_descriptor(), name, value);
}
// ===================================================================

class Foo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchpb.Foo) */ {
 public:
  Foo();
  virtual ~Foo();

  Foo(const Foo& from);
  Foo(Foo&& from) noexcept
    : Foo() {
    *this = ::std::move(from);
  }

  inline Foo& operator=(const Foo& from) {
    CopyFrom(from);
    return *this;
  }
  inline Foo& operator=(Foo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Foo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Foo* internal_default_instance() {
    return reinterpret_cast<const Foo*>(
               &_Foo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void UnsafeArenaSwap(Foo* other);
  void Swap(Foo* other);
  friend void swap(Foo& a, Foo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Foo* New() const final {
    return CreateMaybeMessage<Foo>(nullptr);
  }

  Foo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Foo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Foo& from);
  void MergeFrom(const Foo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Foo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchpb.Foo";
  }
  protected:
  explicit Foo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bench_5fpb_2eproto);
    return ::descriptor_table_bench_5fpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 count = 2;
  void clear_count();
  static const int kCountFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::uint32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 prefix = 3;
  void clear_prefix();
  static const int kPrefixFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix() const;
  void set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 length = 4;
  void clear_length();
  static const int kLengthFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:benchpb.Foo)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 prefix_;
  ::PROTOBUF_NAMESPACE_ID::uint32 length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bench_5fpb_2eproto;
};
// -------------------------------------------------------------------

class Bar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchpb.Bar) */ {
 public:
  Bar();
  virtual ~Bar();

  Bar(const Bar& from);
  Bar(Bar&& from) noexcept
    : Bar() {
    *this = ::std::move(from);
  }

  inline Bar& operator=(const Bar& from) {
    CopyFrom(from);
    return *this;
  }
  inline Bar& operator=(Bar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Bar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Bar* internal_default_instance() {
    return reinterpret_cast<const Bar*>(
               &_Bar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Bar* other);
  void Swap(Bar* other);
  friend void swap(Bar& a, Bar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Bar* New() const final {
    return CreateMaybeMessage<Bar>(nullptr);
  }

  Bar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Bar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Bar& from);
  void MergeFrom(const Bar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Bar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchpb.Bar";
  }
  protected:
  explicit Bar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bench_5fpb_2eproto);
    return ::descriptor_table_bench_5fpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .benchpb.Foo parent = 1;
  bool has_parent() const;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::benchpb::Foo& parent() const;
  ::benchpb::Foo* release_parent();
  ::benchpb::Foo* mutable_parent();
  void set_allocated_parent(::benchpb::Foo* parent);
  void unsafe_arena_set_allocated_parent(
      ::benchpb::Foo* parent);
  ::benchpb::Foo* unsafe_arena_release_parent();

  // int32 time = 2;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int32 value);

  // float ratio = 3;
  void clear_ratio();
  static const int kRatioFieldNumber = 3;
  float ratio() const;
  void set_ratio(float value);

  // uint32 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:benchpb.Bar)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::benchpb::Foo* parent_;
  ::PROTOBUF_NAMESPACE_ID::int32 time_;
  float ratio_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bench_5fpb_2eproto;
};
// -------------------------------------------------------------------

class FooBar :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchpb.FooBar) */ {
 public:
  FooBar();
  virtual ~FooBar();

  FooBar(const FooBar& from);
  FooBar(FooBar&& from) noexcept
    : FooBar() {
    *this = ::std::move(from);
  }

  inline FooBar& operator=(const FooBar& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooBar& operator=(FooBar&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FooBar& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FooBar* internal_default_instance() {
    return reinterpret_cast<const FooBar*>(
               &_FooBar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void UnsafeArenaSwap(FooBar* other);
  void Swap(FooBar* other);
  friend void swap(FooBar& a, FooBar& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FooBar* New() const final {
    return CreateMaybeMessage<FooBar>(nullptr);
  }

  FooBar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FooBar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FooBar& from);
  void MergeFrom(const FooBar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FooBar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchpb.FooBar";
  }
  protected:
  explicit FooBar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bench_5fpb_2eproto);
    return ::descriptor_table_bench_5fpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);

  // .benchpb.Bar sibling = 1;
  bool has_sibling() const;
  void clear_sibling();
  static const int kSiblingFieldNumber = 1;
  const ::benchpb::Bar& sibling() const;
  ::benchpb::Bar* release_sibling();
  ::benchpb::Bar* mutable_sibling();
  void set_allocated_sibling(::benchpb::Bar* sibling);
  void unsafe_arena_set_allocated_sibling(
      ::benchpb::Bar* sibling);
  ::benchpb::Bar* unsafe_arena_release_sibling();

  // double rating = 3;
  void clear_rating();
  static const int kRatingFieldNumber = 3;
  double rating() const;
  void set_rating(double value);

  // uint32 postfix = 4;
  void clear_postfix();
  static const int kPostfixFieldNumber = 4;
  ::PROTOBUF_NAMESPACE_ID::uint32 postfix() const;
  void set_postfix(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:benchpb.FooBar)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::benchpb::Bar* sibling_;
  double rating_;
  ::PROTOBUF_NAMESPACE_ID::uint32 postfix_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bench_5fpb_2eproto;
};
// -------------------------------------------------------------------

class FooBarContainer :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:benchpb.FooBarContainer) */ {
 public:
  FooBarContainer();
  virtual ~FooBarContainer();

  FooBarContainer(const FooBarContainer& from);
  FooBarContainer(FooBarContainer&& from) noexcept
    : FooBarContainer() {
    *this = ::std::move(from);
  }

  inline FooBarContainer& operator=(const FooBarContainer& from) {
    CopyFrom(from);
    return *this;
  }
  inline FooBarContainer& operator=(FooBarContainer&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FooBarContainer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FooBarContainer* internal_default_instance() {
    return reinterpret_cast<const FooBarContainer*>(
               &_FooBarContainer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(FooBarContainer* other);
  void Swap(FooBarContainer* other);
  friend void swap(FooBarContainer& a, FooBarContainer& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FooBarContainer* New() const final {
    return CreateMaybeMessage<FooBarContainer>(nullptr);
  }

  FooBarContainer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FooBarContainer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FooBarContainer& from);
  void MergeFrom(const FooBarContainer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FooBarContainer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "benchpb.FooBarContainer";
  }
  protected:
  explicit FooBarContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bench_5fpb_2eproto);
    return ::descriptor_table_bench_5fpb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .benchpb.FooBar list = 1;
  int list_size() const;
  void clear_list();
  static const int kListFieldNumber = 1;
  ::benchpb::FooBar* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchpb::FooBar >*
      mutable_list();
  const ::benchpb::FooBar& list(int index) const;
  ::benchpb::FooBar* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchpb::FooBar >&
      list() const;

  // string location = 4;
  void clear_location();
  static const int kLocationFieldNumber = 4;
  const std::string& location() const;
  void set_location(const std::string& value);
  void set_location(std::string&& value);
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  std::string* mutable_location();
  std::string* release_location();
  void set_allocated_location(std::string* location);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_location();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_location(
      std::string* location);

  // bool initialized = 2;
  void clear_initialized();
  static const int kInitializedFieldNumber = 2;
  bool initialized() const;
  void set_initialized(bool value);

  // .benchpb.Enum fruit = 3;
  void clear_fruit();
  static const int kFruitFieldNumber = 3;
  ::benchpb::Enum fruit() const;
  void set_fruit(::benchpb::Enum value);

  // @@protoc_insertion_point(class_scope:benchpb.FooBarContainer)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchpb::FooBar > list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr location_;
  bool initialized_;
  int fruit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bench_5fpb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Foo

// uint64 id = 1;
inline void Foo::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Foo::id() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.id)
  return id_;
}
inline void Foo::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.id)
}

// uint32 count = 2;
inline void Foo::clear_count() {
  count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Foo::count() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.count)
  return count_;
}
inline void Foo::set_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.count)
}

// uint32 prefix = 3;
inline void Foo::clear_prefix() {
  prefix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Foo::prefix() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.prefix)
  return prefix_;
}
inline void Foo::set_prefix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  prefix_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.prefix)
}

// uint32 length = 4;
inline void Foo::clear_length() {
  length_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Foo::length() const {
  // @@protoc_insertion_point(field_get:benchpb.Foo.length)
  return length_;
}
inline void Foo::set_length(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  length_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Foo.length)
}

// -------------------------------------------------------------------

// Bar

// .benchpb.Foo parent = 1;
inline bool Bar::has_parent() const {
  return this != internal_default_instance() && parent_ != nullptr;
}
inline void Bar::clear_parent() {
  if (GetArenaNoVirtual() == nullptr && parent_ != nullptr) {
    delete parent_;
  }
  parent_ = nullptr;
}
inline const ::benchpb::Foo& Bar::parent() const {
  const ::benchpb::Foo* p = parent_;
  // @@protoc_insertion_point(field_get:benchpb.Bar.parent)
  return p != nullptr ? *p : *reinterpret_cast<const ::benchpb::Foo*>(
      &::benchpb::_Foo_default_instance_);
}
inline ::benchpb::Foo* Bar::release_parent() {
  // @@protoc_insertion_point(field_release:benchpb.Bar.parent)
  
  ::benchpb::Foo* temp = parent_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  parent_ = nullptr;
  return temp;
}
inline ::benchpb::Foo* Bar::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:benchpb.Bar.parent)
  
  ::benchpb::Foo* temp = parent_;
  parent_ = nullptr;
  return temp;
}
inline ::benchpb::Foo* Bar::mutable_parent() {
  
  if (parent_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchpb::Foo>(GetArenaNoVirtual());
    parent_ = p;
  }
  // @@protoc_insertion_point(field_mutable:benchpb.Bar.parent)
  return parent_;
}
inline void Bar::set_allocated_parent(::benchpb::Foo* parent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete parent_;
  }
  if (parent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(parent);
    if (message_arena != submessage_arena) {
      parent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parent, submessage_arena);
    }
    
  } else {
    
  }
  parent_ = parent;
  // @@protoc_insertion_point(field_set_allocated:benchpb.Bar.parent)
}

// int32 time = 2;
inline void Bar::clear_time() {
  time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Bar::time() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.time)
  return time_;
}
inline void Bar::set_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.time)
}

// float ratio = 3;
inline void Bar::clear_ratio() {
  ratio_ = 0;
}
inline float Bar::ratio() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.ratio)
  return ratio_;
}
inline void Bar::set_ratio(float value) {
  
  ratio_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.ratio)
}

// uint32 size = 4;
inline void Bar::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Bar::size() const {
  // @@protoc_insertion_point(field_get:benchpb.Bar.size)
  return size_;
}
inline void Bar::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:benchpb.Bar.size)
}

// -------------------------------------------------------------------

// FooBar

// .benchpb.Bar sibling = 1;
inline bool FooBar::has_sibling() const {
  return this != internal_default_instance() && sibling_ != nullptr;
}
inline void FooBar::clear_sibling() {
  if (GetArenaNoVirtual() == nullptr && sibling_ != nullptr) {
    delete sibling_;
  }
  sibling_ = nullptr;
}
inline const ::benchpb::Bar& FooBar::sibling() const {
  const ::benchpb::Bar* p = sibling_;
  // @@protoc_insertion_point(field_get:benchpb.FooBar.sibling)
  return p != nullptr ? *p : *reinterpret_cast<const ::benchpb::Bar*>(
      &::benchpb::_Bar_default_instance_);
}
inline ::benchpb::Bar* FooBar::release_sibling() {
  // @@protoc_insertion_point(field_release:benchpb.FooBar.sibling)
  
  ::benchpb::Bar* temp = sibling_;
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  sibling_ = nullptr;
  return temp;
}
inline ::benchpb::Bar* FooBar::unsafe_arena_release_sibling() {
  // @@protoc_insertion_point(field_unsafe_arena_release:benchpb.FooBar.sibling)
  
  ::benchpb::Bar* temp = sibling_;
  sibling_ = nullptr;
  return temp;
}
inline ::benchpb::Bar* FooBar::mutable_sibling() {
  
  if (sibling_ == nullptr) {
    auto* p = CreateMaybeMessage<::benchpb::Bar>(GetArenaNoVirtual());
    sibling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:benchpb.FooBar.sibling)
  return sibling_;
}
inline void FooBar::set_allocated_sibling(::benchpb::Bar* sibling) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sibling_;
  }
  if (sibling) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sibling);
    if (message_arena != submessage_arena) {
      sibling = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sibling, submessage_arena);
    }
    
  } else {
    
  }
  sibling_ = sibling;
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBar.sibling)
}

// string name = 2;
inline void FooBar::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& FooBar::name() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.name)
  return name_.Get();
}
inline void FooBar::set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:benchpb.FooBar.name)
}
inline void FooBar::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:benchpb.FooBar.name)
}
inline void FooBar::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:benchpb.FooBar.name)
}
inline void FooBar::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:benchpb.FooBar.name)
}
inline std::string* FooBar::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:benchpb.FooBar.name)
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* FooBar::release_name() {
  // @@protoc_insertion_point(field_release:benchpb.FooBar.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FooBar::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBar.name)
}
inline std::string* FooBar::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:benchpb.FooBar.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FooBar::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchpb.FooBar.name)
}

// double rating = 3;
inline void FooBar::clear_rating() {
  rating_ = 0;
}
inline double FooBar::rating() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.rating)
  return rating_;
}
inline void FooBar::set_rating(double value) {
  
  rating_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBar.rating)
}

// uint32 postfix = 4;
inline void FooBar::clear_postfix() {
  postfix_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FooBar::postfix() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBar.postfix)
  return postfix_;
}
inline void FooBar::set_postfix(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  postfix_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBar.postfix)
}

// -------------------------------------------------------------------

// FooBarContainer

// repeated .benchpb.FooBar list = 1;
inline int FooBarContainer::list_size() const {
  return list_.size();
}
inline void FooBarContainer::clear_list() {
  list_.Clear();
}
inline ::benchpb::FooBar* FooBarContainer::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:benchpb.FooBarContainer.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchpb::FooBar >*
FooBarContainer::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:benchpb.FooBarContainer.list)
  return &list_;
}
inline const ::benchpb::FooBar& FooBarContainer::list(int index) const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.list)
  return list_.Get(index);
}
inline ::benchpb::FooBar* FooBarContainer::add_list() {
  // @@protoc_insertion_point(field_add:benchpb.FooBarContainer.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::benchpb::FooBar >&
FooBarContainer::list() const {
  // @@protoc_insertion_point(field_list:benchpb.FooBarContainer.list)
  return list_;
}

// bool initialized = 2;
inline void FooBarContainer::clear_initialized() {
  initialized_ = false;
}
inline bool FooBarContainer::initialized() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.initialized)
  return initialized_;
}
inline void FooBarContainer::set_initialized(bool value) {
  
  initialized_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.initialized)
}

// .benchpb.Enum fruit = 3;
inline void FooBarContainer::clear_fruit() {
  fruit_ = 0;
}
inline ::benchpb::Enum FooBarContainer::fruit() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.fruit)
  return static_cast< ::benchpb::Enum >(fruit_);
}
inline void FooBarContainer::set_fruit(::benchpb::Enum value) {
  
  fruit_ = value;
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.fruit)
}

// string location = 4;
inline void FooBarContainer::clear_location() {
  location_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& FooBarContainer::location() const {
  // @@protoc_insertion_point(field_get:benchpb.FooBarContainer.location)
  return location_.Get();
}
inline void FooBarContainer::set_location(const std::string& value) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:benchpb.FooBarContainer.location)
}
inline void FooBarContainer::set_location(std::string&& value) {
  
  location_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:benchpb.FooBarContainer.location)
}
inline void FooBarContainer::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:benchpb.FooBarContainer.location)
}
inline void FooBarContainer::set_location(const char* value,
    size_t size) {
  
  location_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:benchpb.FooBarContainer.location)
}
inline std::string* FooBarContainer::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:benchpb.FooBarContainer.location)
  return location_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* FooBarContainer::release_location() {
  // @@protoc_insertion_point(field_release:benchpb.FooBarContainer.location)
  
  return location_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void FooBarContainer::set_allocated_location(std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), location,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:benchpb.FooBarContainer.location)
}
inline std::string* FooBarContainer::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:benchpb.FooBarContainer.location)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return location_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void FooBarContainer::unsafe_arena_set_allocated_location(
    std::string* location) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (location != nullptr) {
    
  } else {
    
  }
  location_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      location, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:benchpb.FooBarContainer.location)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace benchpb

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::benchpb::Enum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::benchpb::Enum>() {
  return ::benchpb::Enum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bench_5fpb_2eproto
